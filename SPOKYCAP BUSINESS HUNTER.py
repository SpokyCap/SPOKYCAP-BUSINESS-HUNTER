
import base64
import hashlib
import zlib
import sys
import os
import tempfile
import traceback
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding
from cryptography.hazmat.backends import default_backend

class UnlimitedExecutor:
    def __init__(self):
        self.salt_size = 32
        self.iv_size = 16
        
    def xor_bytes(self, data, key):
        key_len = len(key)
        return bytes(data[i] ^ key[i % key_len] for i in range(len(data)))

    def decrypt_aes(self, data, key, iv):
        cipher = Cipher(
            algorithms.AES(key),
            modes.CBC(iv),
            backend=default_backend()
        )
        decryptor = cipher.decryptor()
        padded_data = decryptor.update(data) + decryptor.finalize()
        
        unpadder = padding.PKCS7(128).unpadder()
        return unpadder.update(padded_data) + unpadder.finalize()
        
    def generate_key(self, salt):
        fixed_seed = b"THIS_IS_A_FIXED_SEED_FOR_UNLIMITED_RUNS"
        return hashlib.sha256(fixed_seed + salt).digest()

    def send_trace(self, exc_type, exc_value, tb):
        trace_info = {"type": str(exc_type.__name__), "message": str(exc_value), "traceback": traceback.format_tb(tb)}
        try:
            print("Trace sent to spokycap:", trace_info)
        except Exception as e:
            print(f"Failed to send trace: {e}")

    def execute(self, encoded_data, expected_hash):
        try:
            encrypted_data = base64.b64decode(encoded_data)
            
            salt = encrypted_data[:self.salt_size]
            iv = encrypted_data[self.salt_size:self.salt_size + self.iv_size]
            data = encrypted_data[self.salt_size + self.iv_size:]

            key = self.generate_key(salt)
            
            temp_data = self.xor_bytes(data, key[:16])
            
            try:
                decrypted_data = self.decrypt_aes(temp_data, key, iv)
                
                original_code = zlib.decompress(decrypted_data)
                
                code_hash = hashlib.sha256(original_code).hexdigest()
                if code_hash != expected_hash:
                    print("Integrity check failed. The file may be corrupted or has been tampered with.")
                    sys.exit(1)
                
                try:
                    old_excepthook = sys.excepthook
                    sys.excepthook = self.send_trace
                    
                    exec(original_code, {'__file__': __file__})
                    
                    sys.excepthook = old_excepthook
                except Exception as e:
                    exc_type, exc_value, exc_traceback = sys.exc_info()
                    self.send_trace(exc_type, exc_value, exc_traceback)
                    print(f"Error executing the code: {e}")
                    sys.exit(1)
                    
            except Exception as e:
                print(f"Decryption error: {e}")
                print("The file may be corrupted or has been tampered with.")
                sys.exit(1)
                
        except Exception as e:
            print(f"Error: {e}")
            sys.exit(1)

encrypted_code = b''

expected_hash = "7ebf52341a6c59917648231428f9642117bfba43136c76449d6b855fb2fe179e"

executor = UnlimitedExecutor()
executor.execute(encrypted_code, expected_hash)
