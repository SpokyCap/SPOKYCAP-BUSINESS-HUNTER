
import os
import base64
import hashlib
import zlib
import subprocess
import sys
import traceback

# Auto-install required dependencies
try:
    from Crypto.Cipher import ChaCha20
except ImportError:
    print("[INFO] Installing required dependencies...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "pycryptodome"])
    from Crypto.Cipher import ChaCha20  # Retry import after installation

class UnlimitedExecutor:
    def __init__(self):
        self.salt_size = 32
        self.nonce_size = 12

    def generate_key(self, salt):
        fixed_seed = b"THIS_IS_A_FIXED_SEED_FOR_UNLIMITED_RUNS"
        return hashlib.sha256(fixed_seed + salt).digest()

    def decrypt_chacha20(self, data, key, nonce):
        cipher = ChaCha20.new(key=key, nonce=nonce)
        return cipher.decrypt(data)

    def execute(self, encoded_data, expected_hash):
        try:
            encrypted_data = base64.b64decode(encoded_data)

            salt = encrypted_data[:self.salt_size]
            nonce = encrypted_data[self.salt_size:self.salt_size + self.nonce_size]
            data = encrypted_data[self.salt_size + self.nonce_size:]

            key = self.generate_key(salt)
            decrypted_data = self.decrypt_chacha20(data, key, nonce)

            original_code = zlib.decompress(decrypted_data).decode('utf-8')
            code_hash = hashlib.sha256(original_code.encode()).hexdigest()

            if code_hash != expected_hash:
                print("Integrity check failed. The file may be corrupted or has been tampered with.")
                sys.exit(1)

            exec(original_code, {'__file__': __file__})
        except Exception as e:
            print(f"Error: {e}")
            traceback.print_exc()
            sys.exit(1)

encrypted_data = b''
expected_hash = "7ebf52341a6c59917648231428f9642117bfba43136c76449d6b855fb2fe179e"

executor = UnlimitedExecutor()
executor.execute(encrypted_data, expected_hash)
